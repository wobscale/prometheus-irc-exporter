// Copyright 2010 Hannes Baldursson. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file is part of go-idn

// +build ignore

// Stringprep table generator

package main

import (
	"bufio"
	"flag"
	"fmt"
	"io"
	"log"
	"net/http"
	"strings"
)

func main() {
	printHeader()
	loadChars()
}

var rfc3454URL = flag.String("rfc3454", "", "full URL for rfc3454.txt; defaults to --url http://www.ietf.org/rfc/rfc3454.txt")

const formatA1 = "\tTableElement{ 0x%06s, 0x%06s, d{} }, \t\t\t\t /* %s  */\n"
const formatB = "\tTableElement{ 0x%06s, 0, d{} },\t\t\t\t /* %s */\n"

func printHeader() {
	fmt.Printf("// This file is automatically generated by running \n")
	fmt.Printf("// maketables \n")
	fmt.Printf("// DO NOT EDIT \n\n\n")

	fmt.Printf("package stringprep \n\n")
	//	fmt.Printf("import ( \n")
	//	fmt.Printf("\t\"unicode\"\n")
	//	fmt.Printf(")\n\n")
}

func loadChars() {
	if *rfc3454URL == "" {
		flag.Set("rfc3454", "http://www.ietf.org/rfc/rfc3454.txt")
	}
	resp, err := http.Get(*rfc3454URL)
	if err != nil {
		log.Fatal(err)
	}
	if resp.StatusCode != 200 {
		log.Fatal("bad GET status for rfc3454.txt", resp.Status)
	}
	input := bufio.NewReader(resp.Body)
	//var first uint32 = 0
	t := ""
	for {
		line, err := input.ReadString('\n')
		if err != nil {
			if err == io.EOF {
				break
			}
			log.Fatal(err)
		}
		line = strings.TrimSpace(line)

		if line == "" {
			// Ignore empty lines
		} else if -1 != strings.Index(line, "\u000c") {
			// Ignore FF
		} else if 0 == strings.Index(line, "RFC") {
			// Ignore page headers
		} else if 0 == strings.Index(line, "Hoffman & Blanchet") {
			// Ignore page footer
		} else if -1 != strings.Index(line, "----- Start Table ") {
			// Start of a table
			tname := strings.Fields(line)
			t = tname[3] // table name

			if "A.1" == t {
				fmt.Printf("var _A1 = Table { \n")
			} else if "B.1" == t {
				fmt.Printf("var _B1 = Table { \n")
			} else if "B.2" == t {
				fmt.Printf("var _B2 = Table { \n")
			} else if "B.3" == t {
				fmt.Printf("var _B3 = Table { \n")
			} else if "C.1.1" == t {
				fmt.Printf("var _C11 = Table { \n")
			} else if "C.1.2" == t {
				fmt.Printf("var _C12 = Table { \n")
			} else if "C.2.1" == t {
				fmt.Printf("var _C21 = Table { \n")
			} else if "C.2.2" == t {
				fmt.Printf("var _C22 = Table { \n")
			} else if "C.3" == t {
				fmt.Printf("var _C3 = Table {  \n")
			} else if "C.4" == t {
				fmt.Printf("var _C4 = Table { \n")
			} else if "C.5" == t {
				fmt.Printf("var _C5 = Table { \n")
			} else if "C.6" == t {
				fmt.Printf("var _C6 = Table { \n")
			} else if "C.7" == t {
				fmt.Printf("var _C7 = Table { \n")
			} else if "C.8" == t {
				fmt.Printf("var _C8 = Table { \n")
			} else if "C.9" == t {
				fmt.Printf("var _C9 = Table { \n")
			} else if "D.1" == t {
				fmt.Printf("var _D1 = Table { \n")
			} else if "D.2" == t {
				fmt.Printf("var _D2 = Table { \n")
			}

		} else if -1 != strings.Index(line, "----- End Table ") {
			fmt.Printf("}\n\n\n")
			t = ""
		} else if t != "" {

			if "A.1" == t {
				if len(line) == 4 || len(line) == 5 {
					fmt.Printf(formatA1, line, line, line)

				} else if len(line) == 9 || len(line) == 11 {
					var hi string
					var lo string

					if len(line) == 9 {
						lo = line[0:4]
						hi = line[5:9]
					} else {
						lo = line[0:5]
						hi = line[6:11]
					}

					fmt.Printf(formatA1, lo, hi, line)
				}
			} else if "B.1" == t {
				char := line[0:4]
				fmt.Printf("\tTableElement { 0x%06s, 0, d{}}, \t\t\t\t /* %s */\n", char, line)
			} else if "B.2" == t || "B.3" == t {
				subs := strings.Split(line, ";")
				char := subs[0]
				maps := strings.Fields(subs[1])

				if len(maps) == 1 {
					fmt.Printf("\tTableElement { 0x%06s, 0, d{0x%06s} },  \t\t\t\t /* %s */\n", char, maps[0], line)
				} else if len(maps) == 2 {
					fmt.Printf("\tTableElement { 0x%06s, 0, d{0x%06s, 0x%06s} }, \t\t\t\t /* %s */\n", char, maps[0], maps[1], line)
				} else if len(maps) == 3 {
					fmt.Printf("\tTableElement { 0x%06s, 0, d{0x%06s, 0x%06s, 0x%06s} }, \t\t\t\t /* %s */\n", char, maps[0], maps[1], maps[2], line)
				} else if len(maps) == 4 {
					fmt.Printf("\tTableElement { 0x%06s, 0, d{0x%06s, 0x%06s, 0x%06s, 0x%06s} }, \t\t\t\t /* %s */\n", char, maps[0], maps[1], maps[2], maps[3], line)
				}
				//fmt.Printf(formatB, lo, hi , line)
			} else if "C.1.1" == t || "C.1.2" == t {
				fmt.Printf(formatA1, line[0:4], line[0:4], line)
			} else if "C.2.1" == t || "C.2.2" == t || "C.3" == t || "C.4" == t || "C.5" == t || "C.6" == t || "C.7" == t || "C.8" == t || "C.9" == t || "D.1" == t || "D.2" == t {

				subs := strings.Split(line, ";")

				var chars = subs[0]
				if len(chars) == 4 || len(chars) == 5 {
					fmt.Printf(formatA1, chars, chars, line)

				} else if len(chars) == 9 || len(chars) == 11 || len(chars) == 13 {
					var hi string
					var lo string

					if len(chars) == 9 {
						lo = chars[0:4]
						hi = chars[5:9]
					} else if len(chars) == 11 {
						lo = chars[0:5]
						hi = chars[6:11]
					} else {
						lo = chars[0:6]
						hi = chars[7:13]
					}

					fmt.Printf(formatA1, lo, hi, line)
				}
			}
		}

	}
	resp.Body.Close()
}
